{"name":"Ogonek","tagline":"Unicode stuffs","body":"Ogonek is mostly the result of me playing around with Unicode. It is turning\r\ninto something real.\r\n\r\nCheck out the [wiki] for more detailed information.\r\n\r\n# Setup\r\n\r\nOgonek is mostly header-only. The only part that needs compilation is the data\r\nin the Unicode Character Database. Currently I am translating the database to\r\nC++ source as static initializers (I am aware of the benefits and drawbacks of\r\nthis and other approaches and may or may not change in future versions). If\r\nyou want to get started quickly, you can find pre-generated source code for\r\nvarious versions of the database in the [downloads] page. If you want to make\r\nyour own version of the database, you can find a translator from the XML UCD in\r\nthe `tools` folder.\r\n\r\nOnce you have source code for the UCD, you can compile the whole shebang by\r\nrunning `python scons.py dist` from the command line (requires Python to be\r\ninstalled, for obvious reasons). This will create a zip file in the dist/\r\ndirectory with both the headers and the library files necessary to use ogonek.\r\nBy default, a static library is built. To build a shared library (DLL), add\r\n`lib=shared` to the command-line when building.\r\n\r\n# Status\r\n\r\nHere's a list of what's implemented so far:\r\n\r\n - `text`, a text class template, sometimes known as string. I'm leaving\r\n   \"string\" to mean \"array of code units\", as it's what a `string` class often\r\n   turns out to be (and also what strings in other languages turn out to be).\r\n   This is not that.  This represents text, regardless of encoding. It's a\r\n   class template with template parameters for the underlying encoding and\r\n   container but the interface it offers is for a range of codepoints. This\r\n   makes conversions at API boundaries simple and type-safe. See these documents\r\n   for more info on the ideas behind this class: [motivation] and [design].\r\n\r\n - `any_text`, a type erased variant of `text` for use in compiled\r\n   boundaries, or whenever templates are not appropriate/desired;\r\n\r\n - facilities for converting between ranges of codepoints to ranges of code\r\n   units or bytes in UTF encodings, and vice-versa;\r\n\r\n - importing of data from the Unicode Character Database (UAX #44);\r\n\r\n - canonical equivalence;\r\n\r\n - canonical normalization forms (UAX #15);\r\n\r\n - extended grapheme cluster segmentation (UAX #29);\r\n\r\n - word segmentation (UAX #29);\r\n\r\nAnd a list of what's planned for the near future:\r\n\r\n - sentence segmentation (UAX #29);\r\n\r\n - line break opportunities (UAX #14);\r\n\r\n - collation algorithm (UTS #10);\r\n\r\n  [design]: http://gist.io/3166256\r\n  [wiki]: http://bitbucket.org/martinhofernandes/ogonek/wiki/Home\r\n  [downloads]: http://bitbucket.org/martinhofernandes/ogonek/downloads\r\n  [motivation]: http://flamingdangerzone.com/unicode/2012/10/27/utf8-only-somewhere.html\r\n\r\n","google":"UA-36780285-1","note":"Don't delete this file! It's used internally to help with page regeneration."}